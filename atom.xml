<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[NullPointerException]]></title>
  <subtitle><![CDATA[Code a fucking world.]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2015-02-19T08:41:18.662Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[NullPointerException]]></name>
    <email><![CDATA[lqg0213@gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Android键盘遮挡EditText解决方案]]></title>
    <link href="http://yoursite.com/2014/11/08/Hello-World/"/>
    <id>http://yoursite.com/2014/11/08/Hello-World/</id>
    <published>2014-11-08T06:54:53.000Z</published>
    <updated>2014-11-08T12:55:23.000Z</updated>
    <content type="html"><![CDATA[<p>刚部署好博客，趁热撸一篇。</p>
<hr>
<p>&nbsp;&nbsp;&nbsp;&nbsp;前段时间，在项目开发过程中，遇到一个Case：在小屏幕设备上，对于如下图这样有多个EditText的布局，当键盘弹出时，会遮挡住处于下半部分的某些EditText。<br><br><img src="http://jungerr.qiniudn.com/im_layout_notshowim.jpg" alt="未激活键盘"><br>  <br></p>
<h2 id="常用方案分析">常用方案分析</h2>
<p>&nbsp;&nbsp;&nbsp;&nbsp;一般的解决方案是ScrollView+windowSoftInputMode，这样当键盘弹出时，系统会将获得焦点的EditText移动至可见的位置，然后用户可以上下滑动屏幕来查看被遮挡的EditText。<br>&nbsp;&nbsp;&nbsp;&nbsp;Asana APP是通过压缩控件之间的垂直间距，并且尽量把控件放在上方，来给键盘腾出空间，避免控件被遮挡。<br>&nbsp;&nbsp;&nbsp;&nbsp;但是对于本例来说，这些解决方案都不太“优雅”。</p>
<h2 id="用户意图">用户意图</h2>
<p>&nbsp;&nbsp;&nbsp;&nbsp;当键盘被激活时，用户的意图是<strong>输入内容</strong>。这时，可视区域的“Learning Genie”logo是毫无意义的。理想情况下，logo向上滑动至不可见，而“Name”至“Next”部分向上滑动至完全可见。<br>&nbsp;&nbsp;&nbsp;&nbsp;那么，如何实现这种效果呢？<br><a id="more"></a></p>
<h2 id="探索">探索</h2>
<p>&nbsp;&nbsp;&nbsp;&nbsp;首先想到的是，ScrollView作为父布局，计算在Y方向需要移动的距离，然后调用<code>setTranslationY()</code>方法向上移动logo和输入区域。但是这种方案需要计算距离，并且在键盘隐藏时又需要重新调整布局，既麻烦又low。<br>&nbsp;&nbsp;&nbsp;&nbsp;然后想到的是，ScrollView向上滑动到底，对本例来说，“next”按钮就是底部，所以这种方案可以满足要求。<br>&nbsp;&nbsp;&nbsp;&nbsp;翻阅Android SDK文档，查找ScrollView有没有ScrollToBottom之类的方法。</p>
<h2 id="scrollView-fullScroll(int_direction)">scrollView.fullScroll(int direction)</h2>
<p>&nbsp;&nbsp;&nbsp;&nbsp;<code>scrollView.fullScroll(ScrollView.FOCUS_DOWN)</code>可以将ScrollView滑动至底部：<br>&nbsp;&nbsp;&nbsp;&nbsp;然而，该方法非常操蛋，当滑动到最底部后，它会把焦点赋给最后child View（“next”）。<br>&nbsp;&nbsp;&nbsp;&nbsp;查看ScrollView的源码可知，<code>fullScroll(int direction)</code>和两个方法有关：<code>scrollAndFocus(int direction, int top, int bottom)</code>和<code>findFocusableViewInBounds(boolean topFocus, int top, int bottom)</code>。前者负责滑动和重置焦点，而后者负责判断哪个子View可以获得焦点。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">scrollAndFocus</span>(<span class="keyword">int</span> direction, <span class="keyword">int</span> top, <span class="keyword">int</span> bottom) {</div><div class="line">        <span class="keyword">boolean</span> handled = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> height = getHeight();</div><div class="line">        <span class="keyword">int</span> containerTop = getScrollY();</div><div class="line">        <span class="keyword">int</span> containerBottom = containerTop + height;</div><div class="line">        <span class="keyword">boolean</span> up = direction == View.FOCUS_UP;</div><div class="line"></div><div class="line">        View newFocused = findFocusableViewInBounds(up, top, bottom);</div><div class="line">        <span class="keyword">if</span> (newFocused == <span class="keyword">null</span>) {</div><div class="line">            newFocused = <span class="keyword">this</span>;</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (top &gt;= containerTop && bottom &lt;= containerBottom) {</div><div class="line">            handled = <span class="keyword">false</span>;</div><div class="line">        } <span class="keyword">else</span> {</div><div class="line">            <span class="keyword">int</span> delta = up ? (top - containerTop) : (bottom - containerBottom);</div><div class="line">            doScrollY(delta);</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (newFocused != findFocus()) newFocused.requestFocus(direction);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> handled;</div><div class="line">    }</div></pre></td></tr></table></figure>

<p>&nbsp;&nbsp;&nbsp;&nbsp;在<code>scrollAndFocus(int direction, int top, int bottom)</code>方法中，和焦点有关的代码是</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">View newFocused = findFocusableViewInBounds(up, top, bottom);</div><div class="line"><span class="keyword">if</span> (newFocused == <span class="keyword">null</span>) {</div><div class="line">    newFocused = <span class="keyword">this</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>和</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (newFocused != findFocus()) newFocused.requestFocus(direction);</div></pre></td></tr></table></figure>

<p>&nbsp;&nbsp;&nbsp;&nbsp;重写<code>scrollAndFocus(int direction, int top, int bottom)</code>方法，注销掉这两段代码即可。<br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;需要注意的是，从EditText被点击获得焦点到弹出键盘，需要一定的时间间隔。如果在此期间内调用<code>fullScroll()</code>方法，是没有效果的，因为界面还没有重新布局好。解决方法是：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">editText.setOnFocusChangeListener(<span class="keyword">new</span> View.OnFocusChangeListener() {</div><div class="line">            <span class="annotation">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFocusChange</span>(View v, <span class="keyword">boolean</span> hasFocus) {</div><div class="line">                <span class="keyword">if</span> (hasFocus) {</div><div class="line">                    <span class="keyword">new</span> Handler().postDelayed(<span class="keyword">new</span> Runnable() {</div><div class="line">                        <span class="annotation">@Override</span></div><div class="line">                        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>() {</div><div class="line">                            scrollView.fullScroll(View.FOCUS_DOWN);</div><div class="line">                        }</div><div class="line">                    }, <span class="number">500</span>);</div><div class="line">                }</div><div class="line">            }</div><div class="line">        });</div></pre></td></tr></table></figure>

<h2 id="总结">总结</h2>
<p>&nbsp;&nbsp;&nbsp;&nbsp;给EditText绑定<code>OnFocusChangeListener</code>或<code>OnClickListener</code>，然后发送延时操作，当键盘弹出后执行<code>fullScroll()</code>方法将ScrollView滑动至底部。</p>
<h2 id="其他">其他</h2>
<p>&nbsp;&nbsp;&nbsp;&nbsp;具体代码参见<a href="https://github.com/Jungerr/FullScrollNotClearFocusScrollView" target="_blank" rel="external">FullScrollNotClearFocusScrollView</a>On <a href="https://github.com/Jungerr" target="_blank" rel="external">Github</a>。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>刚部署好博客，趁热撸一篇。</p>
<hr>
<p>&nbsp;&nbsp;&nbsp;&nbsp;前段时间，在项目开发过程中，遇到一个Case：在小屏幕设备上，对于如下图这样有多个EditText的布局，当键盘弹出时，会遮挡住处于下半部分的某些EditText。<br><br><img src="http://jungerr.qiniudn.com/im_layout_notshowim.jpg" alt="未激活键盘"><br>  <br></p>
<h2 id="常用方案分析">常用方案分析</h2>
<p>&nbsp;&nbsp;&nbsp;&nbsp;一般的解决方案是ScrollView+windowSoftInputMode，这样当键盘弹出时，系统会将获得焦点的EditText移动至可见的位置，然后用户可以上下滑动屏幕来查看被遮挡的EditText。<br>&nbsp;&nbsp;&nbsp;&nbsp;Asana APP是通过压缩控件之间的垂直间距，并且尽量把控件放在上方，来给键盘腾出空间，避免控件被遮挡。<br>&nbsp;&nbsp;&nbsp;&nbsp;但是对于本例来说，这些解决方案都不太“优雅”。</p>
<h2 id="用户意图">用户意图</h2>
<p>&nbsp;&nbsp;&nbsp;&nbsp;当键盘被激活时，用户的意图是<strong>输入内容</strong>。这时，可视区域的“Learning Genie”logo是毫无意义的。理想情况下，logo向上滑动至不可见，而“Name”至“Next”部分向上滑动至完全可见。<br>&nbsp;&nbsp;&nbsp;&nbsp;那么，如何实现这种效果呢？<br>]]>
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="键盘" scheme="http://yoursite.com/tags/%E9%94%AE%E7%9B%98/"/>
    
      <category term="keyboard" scheme="http://yoursite.com/tags/keyboard/"/>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
  </entry>
  
</feed>
